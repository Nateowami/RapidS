<rsm theme="camo">

<style type="text/css">
#clickableButton {
    margin-left: 20;
    margin-right: 20;
    position-x: 0;
    position-y: rel;
    anchor: west;
    padding-y: 40;
    padding-x: 20;
    foreground-color: #FF0000;
}

#clickLabel {
    margin: 0 20 0 0;
    anchor: west;
    fill: none;
    foreground-color: #222222;
}

.standardPosition {
    margin: 0 20 0 20;
    fill: BOTH;
    anchor: west;
}

#rightSide {
    position-x: rel;
    occupied-cells-x: 1;
    occupied-cells-y: 5;
    position-y: 0;
    fill: BOTH;
    margin: 20 10 20 20;
}

label {
    fill: none;
    weight-y: 0.0;
    margin-left: 20;
    margin-right: 20;
    background-color: #999999;
    border: 2 #DDDDDD;
}

spinner {
    fill: HORIZONTAL;
    margin-left: 20;
    margin-right: 20;
}

#logo {
    anchor: west;
    fill: NONE;
    position-x: rel;
    position-y: 0;
    visibility: hidden;
}

#logoPanel {
    position-x: 1;
    position-y: rel;
    anchor: west;
    fill: HORIZONTAL;
}

#showLogo {
    padding-y: 60;
    fill: VERTICAL;
}
</style>

<script type="text/javascript">

    program.onload = function() {
        require(java.awt.Color);
        require(java.lang.Class);
        require(Packages.us.derfers.tribex.rapids);
        require(java.awt.RenderingHints);
        require(java.awt.geom.RoundRectangle2D);

        console.log("Program argument #1: "+arguments[0]);

        var f = files.open("text.txt", "rw+");

        //Demonstrates file dialogs
        /*
        var returnedValues = dialogs.fileDialog({mode : 'load',
            directory : '.',
            filename : "test.txt",
            title : 'File Dialog',
            multiple: false
        });
        console.log(returnedValues.directory+returnedValues.filename);
         */

        //Print the OS information
        console.log("RapidS is running on a " + os.name + " " + os.version
                + ", " + os.arch + "-bit computer.");

        //Execute the Operating System command: "ls"
        os.exec("ls", true);

        //Show a dialog
        //dialogs.message("If you find this dialog anoying, just comment out line #90 of init.rsm.", "Message", "info", "icon.png");
        //I found it annoying :)

        console.log(time.year() + " - " + time.month() + " - " + time.date()
                + " - " + time.monthName(time.month()) + " - "
                + time.dayOfWeek() + " - "
                + time.dayOfWeekName(time.dayOfWeek()) + " - " + time.isAM()
                + " - " + time.hour12() + " - " + time.hour24() + " - "
                + time.minute() + " - " + time.second() + " - "
                + time.millisecond() + " - " + time.isLeapYear() + " - "
                + time.timeInMillis() + " - " + time.dayOfYear() + " - "
                + time.weekOfYear());


        //A basic thread.
        thread = new Worker("console.log('This is executing in a thread!')");
        thread.start();

        //Load the text from file f
        program.getElementById("rightSide").widget.setText(f.read());

        //Dynamic appending of widgets.
        program.getElementById("tabP").appendChild(
                '<tab value="Tab2" id="tab2"></tab><tab value="Tab3"></tab>');
        program.getElementById("tab2").appendChild(
                '<tabpane value="Tab2"><tab value="Tab4"></tab></tabpane>');
    }


    //Button Clicking System
    function runBtnEvt(text, message) {
        var label_list = program.getElementsByClass("changesOnHover");
        for ( var index = 0; index < label_list.length; index++) {
            program.getElementById("__INIT__").widget.setTitle(text);
            label_list[index].widget.setText(text + " - " + message);
        }
    }


    function changeBackground(widget, state) {
        var widgetID = program.getElementById(widget).widget;
        var color;
        if (state == 'click') {
            var color = Color.decode("#666666");

            window.setTimeout('changeBackground("' + widget + '", "out")',
                    200);

        } else if (state == 'over') {
            var color = Color.decode("#EEEEEE");
        } else if (state == 'out') {
            var color = Color.decode("#999999");
        }
        widgetID.setBackground(color);
    }

    function showLogo() {
        if (!program.getElementById('logo').widget.isVisible()) {
            program.getElementById("logo").widget.setVisible(true);
            program.getElementById("showLogo").widget
                    .setText("Hide RapidS logo");
        } else {
            program.getElementById("showLogo").widget
                    .setText("Show RapidS logo");
            program.getElementById("logo").widget.setVisible(false);
        }
    }

    function saveLine() {
        f.writeLine(program.getElementById('saveLine').widget.getText());
        program.getElementById("rightSide").widget.setText(f.read());
    }

</script> <window id="__INIT__">
<head>
<title>RapidS: Test init file</title>
</head>

<body>
    <menu value="File">
        <menuitem>Open</menuitem>
        <menuitem>Save</menuitem>
        <menuitem>Save As</menuitem>

        <menu value="Open Recent">
            <menuitem>Item 1</menuitem>
            <menuitem>Item 2</menuitem>
            <menuitem>Item 3</menuitem>
            <menuitem>Item 4</menuitem>
        </menu>
        <menuitem onmouseup="program.exit(0);">Quit</menuitem>
    </menu>

    <menu value="About">
        <menu value="SubMenu">
            <menuitem>SubMenuItem</menuitem>
        </menu>
    </menu>

    <menu value="Help">
        <menuitem>MenuItem</menuitem>
    </menu>
    <label id="TEST"
        class="changesOnHover" onmouseup="runBtnEvt('Click', 'No Id')"
        onmouseover="runBtnEvt('Mouse Over', 'No Id')"
        onmouseout="runBtnEvt('Mouse Out', 'No Id')">label changes on mouseover, mouseout, and click.</label> <label id="clickLabel"
        onclick="changeBackground('clickLabel', 'click')"
        onmouseover="changeBackground('clickLabel', 'over')"
        onmouseout="changeBackground('clickLabel', 'out')">Clickable label</label>
    <button id="clickableButton" class="changesOnHover"
        onclick="runBtnEvt('Click', program.getElementById('clickableButton').id)"
        onmouseover="runBtnEvt('Mouse Over', program.getElementById('clickableButton').id)"
        onmouseout="runBtnEvt('Mouse Out', program.getElementById('clickableButton').id)">Changes the status of the label.</button>
    <spinner id="spinner" value="10" max="20" min="-1"
        onselection="runBtnEvt(program.getElementById('spinner').widget.getValue(), program.getElementById('spinner').id)" />
    <textfield id="lineToSave" class="standardPosition">Enter a single line of text here!</textfield>
    <button id="saveLine" onclick="saveLine()">Append ^ to text.txt</button>
    <checkbox class="standardPosition" onclick="console.log('My Checkbox')">My Checkbox</checkbox>
    <textarea id="rightSide">Enter multiple lines of text here!</textarea>
    <tabpane id="tabP"> <tab value="Tab1" id="tab1">
    <button class="standardPosition" id="showLogo" onclick="showLogo()">Show RapidS logo</button>
    <img class="standardPosition" id="logo" src="icon.png" /> </tab></tabpane>
</body>
</window> </rsm>
